# -*- coding: utf-8 -*-
"""Sushant_SimLinReg_EXPT3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VvV1OOiNPE45tf0WeMlL4NLC_UQ20BVw
"""

import numpy as np
import matplotlib.pyplot as plt

# Dataset
# BMI (Independant Variable (X-Axis))
X = [17, 21, 24, 28, 14, 16, 19, 22, 15, 18]
# X = [1, 2, 3, 4, 5]
# Cholestrol Level (Dependant Variable (Y-Axis))
Y = [140, 189, 210, 240, 130, 100, 135, 166, 130, 170]
# Y = [3, 4, 2, 4, 5]

# Data Structure
# Converting into numpy arrays for ease of operations
X = np.array(X)
Y = np.array(Y)
print('BMI (Independant Variable (X))           : ', X)
print('Cholestrol Level (Dependant Variable (Y)): ', Y)

# Cost Function (Mean Squared Error)
def se(Y_exp, Y_pre):
    return (Y_exp - Y_pre) ** 2

# Initial values
m = 0       # (Linear Regression Coefficient)
c = 0       # (Random Error)
α = 0.0001    # (Learning Rate)

MSE_L = list()
# Linear Regression
i = 0
while True:
    print(f'\nEpoch {i+1}')
    i += 1
    Y_pre = m * X + c
    np.round_(Y_pre)
    SE = se(Y, Y_pre)
    TSE = np.sum(SE)
    MSE = (1 / np.size(X)) * TSE
    print('SE', SE)
    print('TSE', TSE)
    print(f'X: {X}\nExpected Y: {Y}\nPredicted Y: {Y_pre}\nMean Squared Error: {MSE}')
    MSE_L.append(MSE)

    # Gradient Descent to modify m and c
    # Partial Derivative
    Dm = (2 / np.size(X)) * np.sum((Y_pre - Y) * X)   # doe(m)
    # print(Dm)
    Dc = (2 / np.size(X)) * np.sum((Y_pre - Y))       # doe(c)
    # print(Dc)
    # Updating
    m = m - α * Dm
    # print(m)
    c = c - α * Dc
    # print(c)
    if i > 1:
      cur_mse = MSE_L[-1]
      # print(cur_mse)
      pre_mse = MSE_L[-2]
      # print(pre_mse)
      if (pre_mse - cur_mse) < 0.0001:
          print('MSE Value is Stagnating. No further epochs.')
          break

# Prediction using the generated values of m and c
x = 27          # BMI
y = m * x + c   # Cholestrol level
print(f'For BMI {x}, the predicted Cholestrol Level is {y:.0f}.')

# Plotting
print(MSE_L)
plt.plot(MSE_L)
plt.xlabel('Epochs')
plt.ylabel('MSE')
plt.show()